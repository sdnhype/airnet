# ===========================
# examples/dynLB/
# ===========================

************************
*** virtual topology ***
************************

    client1--|
    client2--|                               |--- WS1
             |-----[IO]---[ Fabric ]---[LB]--|
    client3--|                               |--- WS2
    client4--|

Policies (by app flows):

  Dynamic Load Balancing on LB edge (based on the source address)

************************
*** mininet topology ***
************************


    client1---|
              |---[s1]---|
    client2---|          |          |--[s5]--[s6]--|                 |---WS1
                         |---[s3]---|              |---[s7]---[s8]---|
    client3---|          |          |-----[s4]-----|                 |---WS2
              |---[s2]---|
    client4---|


***************
*** mapping ***
***************

  IO -> s1, s2
  FAB -> s3, s4, s5, s6, s7
  LB -> s8


***************************
*** running and testing ***
***************************

-- AirNet

$ ./launch_airnet_ryu.sh dynLB.dynLoadBalancer dynLB.dynLoadBalancer_mapping

-- RYU

$ cd controllers/ryu/
$ ryu-manager --observe-links airnet_interface.py

-- Mininet

$ sudo python dynLoadBalancer_topo.py 192.168.56.1 6633

-- Tests

mininet> xterm WS1 WS2
  WS1> tcpdump -n -i WS1-eth0
  WS2> tcpdump -n -i WS2-eth0

mininet> client1 wget 10.0.0.50  ---> OK (see WS1 output)
mininet> client3 wget 10.0.0.50  ---> OK (see WS1 output)

mininet> client2 wget 10.0.0.50  ---> OK (see WS2 output)
mininet> client4 wget 10.0.0.50  ---> OK (see WS2 output)
